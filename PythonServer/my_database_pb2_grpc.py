# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import my_database_pb2 as my__database__pb2


class MyDatabaseServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateDatabase = channel.unary_unary(
                '/dbservice.MyDatabaseService/CreateDatabase',
                request_serializer=my__database__pb2.CreateDatabaseRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.AddTable = channel.unary_unary(
                '/dbservice.MyDatabaseService/AddTable',
                request_serializer=my__database__pb2.AddTableRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.RemoveTable = channel.unary_unary(
                '/dbservice.MyDatabaseService/RemoveTable',
                request_serializer=my__database__pb2.RemoveTableRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.AddNewRow = channel.unary_unary(
                '/dbservice.MyDatabaseService/AddNewRow',
                request_serializer=my__database__pb2.AddNewRowRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.AddRow = channel.unary_unary(
                '/dbservice.MyDatabaseService/AddRow',
                request_serializer=my__database__pb2.AddRowRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.DeleteRow = channel.unary_unary(
                '/dbservice.MyDatabaseService/DeleteRow',
                request_serializer=my__database__pb2.DeleteRowRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.AddColumn = channel.unary_unary(
                '/dbservice.MyDatabaseService/AddColumn',
                request_serializer=my__database__pb2.AddColumnRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.DeleteColumn = channel.unary_unary(
                '/dbservice.MyDatabaseService/DeleteColumn',
                request_serializer=my__database__pb2.DeleteColumnRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.RemoveDuplicates = channel.unary_unary(
                '/dbservice.MyDatabaseService/RemoveDuplicates',
                request_serializer=my__database__pb2.RemoveDuplicatesRequest.SerializeToString,
                response_deserializer=my__database__pb2.Empty.FromString,
                )
        self.GetColumnsInfo = channel.unary_unary(
                '/dbservice.MyDatabaseService/GetColumnsInfo',
                request_serializer=my__database__pb2.GetColumnsInfoRequest.SerializeToString,
                response_deserializer=my__database__pb2.ColumnsInfoResponse.FromString,
                )
        self.GetTables = channel.unary_unary(
                '/dbservice.MyDatabaseService/GetTables',
                request_serializer=my__database__pb2.Empty.SerializeToString,
                response_deserializer=my__database__pb2.TablesResponse.FromString,
                )
        self.DisplayTable = channel.unary_unary(
                '/dbservice.MyDatabaseService/DisplayTable',
                request_serializer=my__database__pb2.DisplayTableRequest.SerializeToString,
                response_deserializer=my__database__pb2.DisplayTableResponse.FromString,
                )
        self.UpdateTableCell = channel.unary_unary(
                '/dbservice.MyDatabaseService/UpdateTableCell',
                request_serializer=my__database__pb2.UpdateTableCellRequest.SerializeToString,
                response_deserializer=my__database__pb2.UpdateTableCellResponse.FromString,
                )


class MyDatabaseServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNewRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDuplicates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetColumnsInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTableCell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MyDatabaseServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabase,
                    request_deserializer=my__database__pb2.CreateDatabaseRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'AddTable': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTable,
                    request_deserializer=my__database__pb2.AddTableRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'RemoveTable': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTable,
                    request_deserializer=my__database__pb2.RemoveTableRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'AddNewRow': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNewRow,
                    request_deserializer=my__database__pb2.AddNewRowRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'AddRow': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRow,
                    request_deserializer=my__database__pb2.AddRowRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'DeleteRow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRow,
                    request_deserializer=my__database__pb2.DeleteRowRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'AddColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.AddColumn,
                    request_deserializer=my__database__pb2.AddColumnRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'DeleteColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteColumn,
                    request_deserializer=my__database__pb2.DeleteColumnRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'RemoveDuplicates': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDuplicates,
                    request_deserializer=my__database__pb2.RemoveDuplicatesRequest.FromString,
                    response_serializer=my__database__pb2.Empty.SerializeToString,
            ),
            'GetColumnsInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetColumnsInfo,
                    request_deserializer=my__database__pb2.GetColumnsInfoRequest.FromString,
                    response_serializer=my__database__pb2.ColumnsInfoResponse.SerializeToString,
            ),
            'GetTables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTables,
                    request_deserializer=my__database__pb2.Empty.FromString,
                    response_serializer=my__database__pb2.TablesResponse.SerializeToString,
            ),
            'DisplayTable': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayTable,
                    request_deserializer=my__database__pb2.DisplayTableRequest.FromString,
                    response_serializer=my__database__pb2.DisplayTableResponse.SerializeToString,
            ),
            'UpdateTableCell': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTableCell,
                    request_deserializer=my__database__pb2.UpdateTableCellRequest.FromString,
                    response_serializer=my__database__pb2.UpdateTableCellResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dbservice.MyDatabaseService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MyDatabaseService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/CreateDatabase',
            my__database__pb2.CreateDatabaseRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/AddTable',
            my__database__pb2.AddTableRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/RemoveTable',
            my__database__pb2.RemoveTableRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddNewRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/AddNewRow',
            my__database__pb2.AddNewRowRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/AddRow',
            my__database__pb2.AddRowRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/DeleteRow',
            my__database__pb2.DeleteRowRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/AddColumn',
            my__database__pb2.AddColumnRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/DeleteColumn',
            my__database__pb2.DeleteColumnRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDuplicates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/RemoveDuplicates',
            my__database__pb2.RemoveDuplicatesRequest.SerializeToString,
            my__database__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetColumnsInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/GetColumnsInfo',
            my__database__pb2.GetColumnsInfoRequest.SerializeToString,
            my__database__pb2.ColumnsInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/GetTables',
            my__database__pb2.Empty.SerializeToString,
            my__database__pb2.TablesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplayTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/DisplayTable',
            my__database__pb2.DisplayTableRequest.SerializeToString,
            my__database__pb2.DisplayTableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTableCell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dbservice.MyDatabaseService/UpdateTableCell',
            my__database__pb2.UpdateTableCellRequest.SerializeToString,
            my__database__pb2.UpdateTableCellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
